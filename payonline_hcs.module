<?php
define('AP_PAYONLINE_PATH_MODULE', (string)base_path().drupal_get_path('module', 'payonline_hcs'));
/**
* Valid permissions for this module
* @return array An array of valid permissions for the onthisdate module
*/
function payonline_hcs_permission(){
  return array(
    'anonym_access_payonline_hcs' => array(
      'title' => t('Anonym access payonline_hcs'),
      'restrict access' => TRUE,
    ),
    'view_payonline_hcs' => array(
      'title' => t('View payment payonline_hcs'),
    ),
    'payable_payonline_hcs' => array(
      'title' => t('Can to make payment'),
      'description' => t('Allow users get payment form'),
    ),
    'administer_payonline_hcs' => array(
      'title' => t('Administer payonline_hcs'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implementation of hook_menu().
 * Adds a settings page.
 */
function payonline_hcs_menu() {
  $menu['admin/payonline_hcs'] = array(
    'title' => 'Payments from Payonline',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payonline_hcs_viewpayment'),
    'access arguments' => array('administer_payonline_hcs'),
    'file' => 'payonline_hcs.admin.inc',
  );
  
  $menu['admin/payonline_hcs/list'] = array(
    'title' => 'List all payments',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
    
  );
  
  $menu['admin/payonline_hcs/packs'] = array(
    'title' => 'Packs of payment',
    'description' => 'View or add packs of payment',
    'page callback' => 'payonline_hcs_viewpacks',
    'access arguments' => array('administer_payonline_hcs'),
    'file' => 'payonline_hcs.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  
  $menu['admin/payonline_hcs/packs/view/%'] = array(
    'title' => 'View payments by pack',
    'description' => 'View or add packs of payment',
    'page callback' => 'payonline_hcs_viewreestrpack',
    'page arguments' => array(4),
    'access arguments' => array('administer_payonline_hcs'),
    'file' => 'payonline_hcs.admin.inc',
  );
  
  $menu['admin/payonline_hcs/packs/export/%'] = array(
    'title' => 'Export packs of payment',
    'description' => 'Export pack of payment to CSV',
    'page callback' => 'payonline_hcs_export_pack',
    'page arguments' => array(4),
    'access arguments' => array('administer_payonline_hcs'),
    'file' => 'payonline_hcs.admin.inc',
  );
  
  $menu['admin/payonline_hcs/packs/add'] = array(
    'title' => 'Add the pack of payment',
    'description' => 'Form to addd pack of payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payonline_hcs_add_pack_form'),
    'access arguments' => array('administer_payonline_hcs'),
    'file' => 'payonline_hcs.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'weight' => -1,
  );
  
  $menu['admin/payonline_hcs/export'] = array(
    'title' => 'Export payments for the period',
    'description' => 'Export payment by date range',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payonline_hcs_export_by_date_form'),
    'access arguments' => array('administer_payonline_hcs'),
    'file' => 'payonline_hcs.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  
  $menu['admin/payonline_hcs/statistic'] = array(
    'title' => 'Statistics',
    'page callback' => 'payonline_hcs_statistic_page',
    //~ 'page arguments' => array('alcom_konsalt_admin_oplata'),
    'access arguments' => array('administer_payonline_hcs'),
    'file' => 'payonline_hcs.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );
  
  $menu['admin/payonline_hcs/statistic/stat'] = array(
    'title' => 'Statistics', 
    'type' => MENU_DEFAULT_LOCAL_TASK, 
    'weight' => -10,
  );
  
  $menu['admin/payonline_hcs/configure'] = array(
    'title' => 'Configure Payonline',
    'description' => 'Configure the Payonline HCS module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payonline_hcs_admin'),
    'access arguments' => array('administer_payonline_hcs'),
    'file' => 'payonline_hcs.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  
  $menu['admin/payonline_hcs/configure/setting'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
    
  );
  
  $menu['admin/payonline_hcs/configure/import'] = array(
    'title' => 'Handbooks',
    'page callback' => 'payonline_hcs_fill_handbooks_page',
    'access arguments' => array('administer_payonline_hcs'),
    'file' => 'payonline_hcs.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  
  //~ User
  $menu['payonline-hcs/make-payment'] = array(
    'title' => 'Make payment Payonline',
    'description' => 'Make payment to Payonline.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payonline_hcs_payment_form'),
    'access arguments' => array('payable_payonline_hcs'),
  );
  
  $menu['payonline-hcs/view-payment'] = array(
    'title' => 'View payment from Payonline',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payonline_hcs_viewpayment'),
    'access arguments' => array('view_payonline_hcs'),
    'file' => 'payonline_hcs.admin.inc',
  );
  
  $menu['payonline-hcs/confirm'] = array(
    'title' => 'Confirm Payment Payonline',
    'description' => 'Confirm Payment from Payonline.',
    'page callback' => 'payonline_hcs_confirm_payment',
    'access arguments' => array('anonym_access_payonline_hcs'),
    'file' => 'payonline_hcs.user.inc',
    'type' => MENU_CALLBACK
  );

  $menu['payonline-hcs/check-status'] = array(
    'title' => 'Check payment status Payonline',
    'description' => 'Form to check of payment status',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payonline_hcs_check_status_payment_form'),
    'access arguments' => array('payable_payonline_hcs'),
  );
  return $menu;
}

/**
 * Implements hook_block_info().
 */
function payonline_hcs_block_info(){
  $blocks['pay_hcs_payform_block'] = array(
    'info' => t('Payment form HCS'),
    'status' => FALSE,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => 'payonline-hcs/make-payment',
  );
  $blocks['pay_hcs_check_status_form_block'] = array(
    'info' => t('Check payment status Payonline'),
    'status' => FALSE,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => 'payonline-hcs/check-status',
  );
  return $blocks;
}

/**
 * Implements hook_forms().
 * Need to accommodate multiple forms of payment on a single page.
 */
function payonline_hcs_forms($form_id, $args) {
  $forms = array();
  if(strpos($form_id, 'payonline_hcs_form_fill_handbooks_with_') !== false){
    $forms[$form_id]['callback'] = 'payonline_hcs_fill_handbooks_form';
    $forms[$form_id]['callback arguments'] = $args;
  }
  return $forms;
}

/**
 * Implements hook_block_configure().
 */
function payonline_hcs_block_configure($delta=''){
  $form = array();
  if($delta == 'pay_hcs_payform_block'){
    $form['payonline_hcs_home_insurance'] = array(
      '#type' => 'textfield',
      '#title' => t('Home insurance'),
      '#default_value' => variable_get('payonline_hcs_home_insurance', 0),
    );
    
    $form['payonline_hcs_liability_insurance'] = array(
      '#type' => 'textfield',
      '#title' => t('Third party liability insurance'),
      '#default_value' => variable_get('payonline_hcs_liability_insurance', 0),
    );
    
    $form['payonline_hcs_full_insurance'] = array(
      '#type' => 'textfield',
      '#title' => t('Full insurance'),
      '#default_value' => variable_get('payonline_hcs_full_insurance', 0),
    );
    
    $form['payonline_hcs_offer_node_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Node ID with contract offer'),
      '#default_value' => variable_get('payonline_hcs_offer_node_id', 0),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function payonline_hcs_block_save($delta = '', $edit = array()) {
  if ($delta == 'pay_hcs_payform_block') {
    variable_set('payonline_hcs_home_insurance', check_plain($edit['payonline_hcs_home_insurance']));
    variable_set('payonline_hcs_liability_insurance', check_plain($edit['payonline_hcs_liability_insurance']));
    variable_set('payonline_hcs_full_insurance', check_plain($edit['payonline_hcs_full_insurance']));
    variable_set('payonline_hcs_offer_node_id', check_plain($edit['payonline_hcs_offer_node_id']));
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function payonline_hcs_block_view($delta = '') {
  if($delta == 'pay_hcs_payform_block'){
    $block['subject'] = t('HCS payment form');
    $block['content'] = drupal_get_form('payonline_hcs_payment_form');
  }
  if($delta == 'pay_hcs_check_status_form_block'){
    $block['subject'] = t('Check payment status Payonline');
    $block['content'] = drupal_get_form('payonline_hcs_check_status_payment_form');
  }
  return $block;
}

/**
 * List steps for the payment form
 * */
function _payonline_hcs_steps_payment_form_steps(){
  return array(
    1 => array(
      'form' => 'payonline_hcs_step_one_payment_form',
    ),
    2 => array(
      'form' => 'payonline_hcs_step_two_payment_form',
    ),
  );
}

/**
 * Payment form.
 * */
function payonline_hcs_payment_form($form, &$form_state){
  global $user;
  
  $rublPay = _payonline_hcs_rubl_image();
  
  if(empty($form_state['step'])){
    $form_state['step']=1;
    $form_state['step_forms'] = _payonline_hcs_steps_payment_form_steps();
  }
  $step = &$form_state['step'];
  
  $form = $form_state['step_forms'][$step]['form']($form, $form_state);
  
  if ($step > 1){
    $form['prev'] = array(
      '#type' => 'submit',
      '#value' => t('Prev'),
      '#name' => 'prev',
      '#submit' => array('payonline_hcs_payment_form_previous_submit'),
      '#limit_validation_errors' => array(),
      '#weight' => 20,
    );
  }
  
  if ($step < sizeof($form_state['step_forms'])){
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Next'),
      '#name' => 'next',
      '#submit' => array('payonline_hcs_payment_form_next_submit'),
      '#weight' => 21,
    );
  }
  else{
    
  }
  
  if (function_exists($form_state['step_forms'][$step]['form'] . '_validate')){
    $form['next']['#validate'] = array($form_state['step_forms'][$step]['form'].'_validate');
  }
  $form['#action'] = url('payonline-hcs/make-payment');
  return $form;
}

function payonline_hcs_step_one_payment_form_validate($form, &$form_state){
  $addr   = array();
  $fls   = payonline_hcs_isset_var($form_state['values']['pay_hcs_lc_fkey']);
  $flat  = payonline_hcs_isset_var($form_state['values']['pay_hcs_room_flats']);
  $elect  = payonline_hcs_isset_var($form_state['values']['pay_hcs_electric']);
  $gas  = payonline_hcs_isset_var($form_state['values']['pay_hcs_gas']);
  
  if(variable_get('payonline_hcs_use_handbook_verify', 0) > 0){
    $addr = db_select('payonline_hcs_pan_flats', 'ch')
    ->fields('ch', array('id'))
    ->condition('pf_lc_fkey', check_plain(trim($fls)))
    ->condition('pf_flat', check_plain(trim($flat)))
    ->range(0,1)
    ->execute()->fetchAssoc();
    if(empty($addr) and variable_get('payonline_hcs_use_handbook_verify', 0) > 0){
      form_set_error('pay_hcs_lc_fkey', t('Personal account number does not match with the number of flats.'));
    }
  }
  
  if(!empty($elect)){
    $epin = db_select('payonline_hcs_electric_pins', 'ep')
    ->fields('ep', array('ep_pin'))
    ->condition('ep_lc_fkey', check_plain(trim($fls)))
    ->range(0,1)
    ->execute()->fetchObject();
    if($epin){
      $form_state['values']['pay_hcs_electric_pin'] = $epin->ep_pin;
    }
    else{
      form_set_error('pay_hcs_lc_fkey', t('For this personal account number does not found the electric PIN. Payment for the electric power impossible.'));
    }
  }
  
  if(!empty($gas)){
    $egas = db_select('payonline_hcs_gas_pins', 'gp')
    ->fields('gp', array('gp_pin'))
    ->condition('gp_lc_fkey', check_plain(trim($fls)))
    ->range(0,1)
    ->execute()->fetchObject();
    if($egas){
      $form_state['values']['pay_hcs_gas_pin'] = $egas->gp_pin;
    }
    else{
      form_set_error('pay_hcs_lc_fkey', t('For this personal account number does not found the gas PIN.'));
    }
  }
}
/*
 * Go to back previos step
 * */
function payonline_hcs_payment_form_previous_submit($form, &$form_state){
  $step = &$form_state['step'];
  $form_state['step_forms'][$step]['stored_values'] = $form_state['values'];
  if ($step > 1) {
    $step--;
    $form_state['values'] = $form_state['step_forms'][$step]['stored_values'];
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Next step submit
 * */
function payonline_hcs_payment_form_next_submit($form, &$form_state){
  $step = &$form_state['step'];
  $form_state['values']['pay_hcs_order_id'] = isset($form_state['values']['pay_hcs_order_id']) ? $form_state['values']['pay_hcs_order_id'] : _payonline_hcs_generate_order_id();
  $form_state['step_forms'][$step]['stored_values'] = $form_state['values'];
  if ($step < sizeof($form_state['step_forms'])){
    $step++;
    if (!empty($form_state['step_forms'][$step]['stored_values'])){
      $form_state['values'] = $form_state['step_forms'][$step]['stored_values'];
    }
    else {
      $form_state['values'] = array();
    }
    //~ $form_state['values']['pay_hcs_order_id'] = isset($form_state['values']['pay_hcs_order_id']) ? $form_state['values']['pay_hcs_order_id'] : _payonline_hcs_generate_order_id();
    $form_state['rebuild'] = TRUE;
    return;
  }
}

/*
 * Step 1 payment form.
 * */
function payonline_hcs_step_one_payment_form($form, &$form_state){
  $rublPay = _payonline_hcs_rubl_image();
  $form = $additional = array();
  $form['pay_hcs_lc_fkey'] = array(
    '#type' => 'textfield',
    '#title' => t('Personal account number'),
    '#required' => TRUE,
    '#weight' => 1,
    '#default_value' => !empty($form_state['values']['pay_hcs_lc_fkey']) ? $form_state['values']['pay_hcs_lc_fkey'] : '',
  );
  
  if(variable_get('payonline_hcs_use_handbook_verify', 0) > 0){
    $form['pay_hcs_room_flats'] = array(
      '#type' => 'textfield',
      '#title' => t('Room flats'),
      '#required' => TRUE,
      '#weight' => 2,
      '#default_value' => !empty($form_state['values']['pay_hcs_room_flats']) ? $form_state['values']['pay_hcs_room_flats'] : '',
    );
  }
  
  $form['pay_hcs_sum'] = array(
    '#type' => 'textfield',
    '#title' => t('Sum'),
    '#required' => TRUE,
    '#weight' => 3,
    '#default_value' => !empty($form_state['values']['pay_hcs_sum']) ? $form_state['values']['pay_hcs_sum'] : '',
  );
  
  $insArr = array(t('No'));
  
  if(variable_get('payonline_hcs_home_insurance', 0) > 0){
    $insArr[1] = t('Home insurance').' (+<strong>'.variable_get('payonline_hcs_home_insurance', 0).'</strong>'.$rublPay.')';
  }
  
  if(variable_get('payonline_hcs_liability_insurance', 0) > 0){
    $insArr[2] = t('Third party liability insurance').' (+<strong>'.variable_get('payonline_hcs_liability_insurance', 0).'</strong>'.$rublPay.')';
  }
  
  if(variable_get('payonline_hcs_full_insurance', 0) > 0){
    $insArr[3] = t('Full insurance').' (+<strong>'.variable_get('payonline_hcs_full_insurance', 0).'</strong>'.$rublPay.')';
  }
  $insArr[4] = t('Manually');
  
  $form['pay_hcs_strah_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Insurance'),
    '#weight' => 4,
    '#collapsible' => TRUE,
    '#collapsed' =>!empty($form_state['values']['pay_hcs_strah']) ? FALSE : TRUE,
  );
  
  $form['pay_hcs_strah_fieldset']['pay_hcs_strah'] = array(
    '#type' => 'radios',
    '#title' => t('Insurance'),
    '#weight' => 4,
    '#options' => $insArr,
    '#default_value' => !empty($form_state['values']['pay_hcs_strah']) ? $form_state['values']['pay_hcs_strah'] : 0,
    '#description' => t('If choose "Manually", then Insurance type will be "Full".'),
  );
  
  $form['pay_hcs_strah_fieldset']['pay_hcs_user_strah'] = array(
    '#type' => 'textfield',
    '#title' => t('Insurance sum'),
    '#default_value' => !empty($form_state['values']['pay_hcs_user_strah']) ? $form_state['values']['pay_hcs_user_strah'] : '',
    '#weight' => 7,
    '#states' => array(
      'visible' => array(
        ':input[name="pay_hcs_strah"]' => array('value' => 4),
      ),
    ),
  );
  
  if(variable_get('payonline_hcs_electric', 0) > 0){
    $additional[]['pay_hcs_electric'] = array(
      '#type' => 'textfield',
      '#title' => t('Electric power'),
      '#default_value' => !empty($form_state['values']['pay_hcs_electric']) ? (float)$form_state['values']['pay_hcs_electric'] : '',
      '#weight' => 1,
    );
  }
  
  if(variable_get('payonline_hcs_gas', 0) > 0){
    $additional[]['pay_hcs_gas'] = array(
      '#type' => 'textfield',
      '#title' => t('Gas'),
      '#default_value' => !empty($form_state['values']['pay_hcs_gas']) ? (int)$form_state['values']['pay_hcs_gas'] : '',
      '#weight' => 3,
    );
  }
  
  if(variable_get('payonline_hcs_entry_phone', 0) > 0){
    $additional[]['pay_hcs_entry_phone'] = array(
      '#type' => 'textfield',
      '#title' => t('Entry phone'),
      '#default_value' => !empty($form_state['values']['pay_hcs_entry_phone']) ? (float)$form_state['values']['pay_hcs_entry_phone'] : '',
      '#weight' => 5,
    );
  }
  
  if(!empty($additional)){
    $collapsed = true;
    $addCollapsed=0;
    $form['pay_hcs_additional_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Additional payments'),
      '#weight' => 7,
      '#collapsible' => TRUE,
    );
    foreach($additional as $key=>$val){
      foreach($val as $pKey=>$pVal){
        $form['pay_hcs_additional_fieldset'][$pKey] = $pVal;
        $addCollapsed += (int)$pVal['#default_value'];
      }
    } 
    if($addCollapsed > 0){
      $collapsed = false;
    }
    $form['pay_hcs_additional_fieldset']['#collapsed'] = $collapsed;
  }
  
  $form['pay_hcs_peni'] = array(
    '#type' => 'textfield',
    '#title' => t('Peni'),
    '#default_value' => !empty($form_state['values']['pay_hcs_peni']) ? $form_state['values']['pay_hcs_peni'] : '',
    '#weight' => 9,
  );
  return $form;
}

/**
 * Step 2(finish step) payment form.
 * */
function payonline_hcs_step_two_payment_form($form, &$form_state){
  global $user;
  
  $rublPay = _payonline_hcs_rubl_image();
  
  $form = array();
  $addr   = array();
  $prevStep = $form_state['step']-1;
  
  $form_state['values']   = array_merge($form_state['values'],$form_state['step_forms'][$prevStep]['stored_values']);
  
  $fls   = $form_state['values']['pay_hcs_lc_fkey'];
  $flat  = $form_state['values']['pay_hcs_room_flats'];
  
  $secKeyArr  = array();
  $strahArr  = array(
    '0' => 0,
    '1' => variable_get('payonline_hcs_home_insurance', 0),
    '2' => variable_get('payonline_hcs_liability_insurance', 0),
    '3' => variable_get('payonline_hcs_full_insurance', 0),
    '4' => (float)payonline_hcs_isset_var($form_state['values']['pay_hcs_user_strah']),
  );
  
  $order_id   = $form_state['values']['pay_hcs_order_id'];
  $sum     = (float)$form_state['values']['pay_hcs_sum'];
  $sum100   = $sum;
  $peni     = (float)$form_state['values']['pay_hcs_peni'];
  $electSum  = (float)payonline_hcs_isset_var($form_state['values']['pay_hcs_electric']);
  $gasSum    = (float)payonline_hcs_isset_var($form_state['values']['pay_hcs_gas']);
  $enPhoneSum = (float)payonline_hcs_isset_var($form_state['values']['pay_hcs_entry_phone']);
  $strahSum   = (float)$strahArr[$form_state['values']['pay_hcs_strah']];
  $sum     += $strahSum;
  $sum     += $electSum;
  $sum     += $gasSum;
  $sum     += $enPhoneSum;
  $sum     += $peni;

  if($sum100 <= 0){
    return $form;
  }
  
  if($sum > 30000){
    $sum = round((30000*100)/(100+variable_get('payonline_hcs_commission', 0)),2);
    drupal_set_message(t('Amount does not exceed 30 000.'), 'warning', FALSE);
  }
  
  $paySummProc   = 0;
  $summWithProc   = $sum;
    
  if(variable_get('payonline_hcs_offer_node_id', 0) == 0 or ((bool)variable_get('payonline_hcs_private_key', '') === false)){
    $form['pay_hcs_error']=array(
      '#type' => 'item',
      '#title' => t('Making payments is impossible.'),
      '#markup' => t('Contact the site administrator.'),
      '#weight' => 2,
    );
    return $form;
  }
  
  if(variable_get('payonline_hcs_commission', 0) > 0){
    $proc = (float)variable_get('payonline_hcs_commission', 0)/100;
    $paySummProc = round($sum*$proc,2);
    $summWithProc = $sum+$paySummProc;
  }
  $ordDesc    = t('Payment of charges HCS for personal account number %pan, sum %sum.', array('%pan'=>$fls, '%sum'=>number_format($sum, 2, ',', ' ')));
  
  if($sum100 > 0){
    $form['pay_hcs_sum_detail']=array(
      '#markup' => t('Sum').': <strong>'.$sum100.'</strong>'.$rublPay.'. ',
      '#weight' => 4,
    );
  }
  if($strahSum > 0){
    $form['pay_hcs_sum_detail']['#markup'] .= t('Insurance').': <strong>'.$strahSum.'</strong>'.$rublPay.'. ';
  }
  if($peni > 0){
    $form['pay_hcs_sum_detail']['#markup'] .= t('Peni').': <strong>'.$peni.'</strong>'.$rublPay.'.';
  }
  if($electSum > 0){
    $form['pay_hcs_sum_detail']['#markup'] .= '<br />&nbsp;'.t('Electric power').': <strong>'.$electSum.'</strong>'.$rublPay.'.';
  }
  if($gasSum > 0){
    $form['pay_hcs_sum_detail']['#markup'] .= '&nbsp;'.t('Gas').': <strong>'.$gasSum.'</strong>'.$rublPay.'.';
  }
  if($enPhoneSum > 0){
    $form['pay_hcs_sum_detail']['#markup'] .= '&nbsp;'.t('Entry phone').': <strong>'.$enPhoneSum.'</strong>'.$rublPay.'.';
  }
  
  $arrForm = array(
    /*
     * The required parameters
     * */
    'MerchantId' => variable_get('payonline_hcs_mid', ''),
    'OrderId' => $order_id,
    'Amount' => number_format((float)$summWithProc, 2, '.', ''),
    'Currency' => 'RUB',
    /*
     * Optional parameters
     * */
    'OrderDescription' => strip_tags($ordDesc),// Max length - 100 symbols 
    //~ 'ReturnUrl' => htmlspecialchars('http://alcom-konsalt.ru/payonline-hcs/view-payment'),
  );
  
  foreach($arrForm as $key=>$val2){
    $form[$key] = array(
      '#type' => 'hidden',
      '#value' => $val2,
    );
    $secKeyArr[] = $key.'='.$val2;
  }
  unset($key,$val2);
  
  $secKeyArr[] = 'PrivateSecurityKey='.variable_get('payonline_hcs_private_key', '');
  
  $secKey = md5(implode('&', $secKeyArr));
  
  $arrForm = array(
    'pay_hcs_uid' => $user->uid,
    'pay_hcs_lc_fkey' => $fls,
    'pay_hcs_commis' => variable_get('payonline_hcs_commission', 0),
    'pay_hcs_peni' => $peni,
    'pay_hcs_home_insurance' => 0,
    'pay_hcs_liability_insurance' => 0,
    'pay_hcs_full_insurance' => 0,
    'pay_hcs_electric_sum' => $electSum,
    'pay_hcs_gas_sum' => $gasSum,
    'pay_hcs_entry_phone_sum' => $enPhoneSum,
  );
  
  //~ To break the types of insurance
  switch($form_state['values']['pay_hcs_strah']){
    case 1:
      $arrForm['pay_hcs_home_insurance'] = $strahSum;
    break;
    case 2:
      $arrForm['pay_hcs_liability_insurance'] = $strahSum;
    break;
    case 3: case 4:
      $arrForm['pay_hcs_full_insurance'] = $strahSum;
    break;
  }
  
  if(!empty($form_state['values']['pay_hcs_electric_pin'])){
    $arrForm['pay_hcs_electric_pin'] = $form_state['values']['pay_hcs_electric_pin'];
  }
  
  if(!empty($form_state['values']['pay_hcs_gas_pin'])){
    $arrForm['pay_hcs_gas_pin'] = $form_state['values']['pay_hcs_gas_pin'];
  }
  
  foreach($arrForm as $key=>$val){
    $form[$key] = array(
      '#type' => 'hidden',
      '#value' => $val,
    );
  }unset($key,$val);
  
  $form['SecurityKey'] = array(
    '#type' => 'hidden',
    '#value' => $secKey,
  );
  
  $form['pay_hcs_fls_number']=array(
    '#type' => 'item',
    '#title' => t('Personal account number').':',
    '#markup' => $fls,
    '#weight' => 0,
  );
  
  $form['pay_hcs_afert']=array(
    '#type' => 'checkbox',
    '#title' => l(t('I have read and agree with the terms of the public offer'), 'node/'.variable_get('payonline_hcs_offer_node_id', 0)),
    '#required' => TRUE,
    '#weight' => 10,
  );
  
  $form['finish'] = array(
      '#type' => 'submit',
      '#value' => t('Pay it').'
'.$summWithProc,
      '#attributes'=> array('class'=>array('pay-button')),
      '#weight' => 30,
  );
  if(variable_get('payonline_hcs_commission', 0) > 0){
    $form['finish']['#value'] .= '*';
    $form['finish']['#suffix'] = '<br /><label for="payonline-hcs-submit-button">*'.t('Comission').'&nbsp;'.variable_get('payonline_hcs_commission', 0).'% - <strong>'.$paySummProc.'</strong>.</label>';
  }
  
  return $form;
}


function payonline_hcs_payment_form_submit($form, &$form_state){
  $step = &$form_state['step'];
  $form_state['step_forms'][$step]['stored_values'] = $form_state['values'];
  form_state_values_clean($form_state);
  unset($form_state['values']['pay_hcs_afert']);
  unset($form_state['values']['pay_hcs_sum']);
  unset($form_state['values']['pay_hcs_order_id']);
  unset($form_state['values']['pay_hcs_strah']);
  unset($form_state['values']['pay_hcs_user_strah']);
  unset($form_state['values']['pay_hcs_room_flats']);
  unset($form_state['values']['submit']);
  //~ debug($form_state['values']); $form_state['rebuild']=true; return false;
  drupal_goto(url(variable_get('payonline_hcs_form_payment_page', 'https://secure.payonlinesystem.com/ru/payment/select/')), array('query'=>$form_state['values']));
}

/**
 * Form to check of payment status
 * */
function payonline_hcs_check_status_payment_form($form=array(), &$form_state){
  $form['pay_hcs_lc_fkey'] = array(
    '#type' => 'textfield',
    '#title' => t('Personal account number'),
    '#required' => TRUE,
    '#weight' => 1,
    '#default_value' => !empty($form_state['values']['pay_hcs_lc_fkey']) ? $form_state['values']['pay_hcs_lc_fkey'] : '',
  );
  $form['pay_hcs_order_num'] = array(
    '#type' => 'textfield',
    '#title' => t('Order number'),
    '#required' => TRUE,
    '#weight' => 2,
    '#default_value' => !empty($form_state['values']['pay_hcs_order_num']) ? $form_state['values']['pay_hcs_order_num'] : '',
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Check'),
    '#weight' => 10,
  );
  $form['pay_hcs_cancel'] = array(
    '#type' => 'link',
    '#title' => t('Cancel'),
    '#href' => '',
    '#weight' => 11,
  );
  $form['#action'] = url('payonline-hcs/check-status');
  return $form;
}

function payonline_hcs_check_status_payment_form_submit($form, &$form_state){
  global $user;
  $lcfkey = check_plain($form_state['values']['pay_hcs_lc_fkey']);
  $ordernum = check_plain($form_state['values']['pay_hcs_order_num']);
  
  $cntCookie = (int)isset($_COOKIE['Drupal_visitor_payonline_hcs_count_check_status']) ? $_COOKIE['Drupal_visitor_payonline_hcs_count_check_status'] : 0;
  $nextTime = (int)isset($_COOKIE['Drupal_visitor_payonline_hcs_next_time_check_status']) ? $_COOKIE['Drupal_visitor_payonline_hcs_next_time_check_status'] : time();
  
  if($cntCookie < 3){
    $q = db_select('payonline_hcs_payments', 'p')
    ->fields('p', array('payment_adopted_status'))
    ->condition('order_id', $ordernum)
    ->condition('lc_fkey', $lcfkey)
    ->execute()->fetchObject();
    
    if($q){
      if((int)$q->payment_adopted_status == 0){
        drupal_set_message(t('Payment has not been confirmed.'), 'warning');
      }
      else{
        drupal_set_message(t('Payment was successful.'));
      }
    }
    else{
      drupal_set_message(t('Payment not found in database.'), 'error');
      $form_state['rebuild'] = TRUE;
    }
  }
  
  $cntCookie++;
  $arrCookie = array(
    'payonline_hcs_count_check_status'=>$cntCookie,
    'payonline_hcs_next_time_check_status'=>$nextTime+700,
  );
  
  if($cntCookie == 3){
    $arrCookie['payonline_hcs_next_time_check_status'] = time()+1800;
  }
  
  if(time() >= $nextTime){
    $arrCookie['payonline_hcs_count_check_status'] = 0;
  }
  
  user_cookie_save($arrCookie);
  
  if($cntCookie > 3 and time() < $nextTime){
    drupal_set_message(t('Too many requests per unit of time.'), 'warning');
  }
  elseif(($cntCookie > 3 and time() >= $nextTime)){
    drupal_set_message(t('Error cookies.'), 'error');
  }
}

/**
 * Implementation of hook_help().
 */
function payonline_hcs_help($path) {
  switch ($path) {
  case 'admin/payonline_hcs/configure/import':
    return t('File formats for all handbooks must be unified. The first column should be a personal account number, the second field must be a number of apartment or electric PIN or gas\'s PIN.<br />Example: %example', array('%example'=>'"1234567";"7654321"'));
  break;
  }
}

function payonline_hcs_isset_var(&$var, $newVal = false){
  if(!isset($var)){
    $var = '';
  }
  if($newVal and isset($var) and empty($var)){
    $var = $newVal;
  }
  return $var;
}

/*
 * Pattern for name of payment pack
 * */
function _payonline_hcs_pack_patterns(){
  return array(
    1 => 'p[%d%m](p'.date('dm').')',
    2 => 'p[%d%m%y](p'.date('dmy').')',
    3 => 'p[%d%m%Y](p'.date('dmY').')',
    4 => 'p[%m%d](p'.date('md').')',
    5 => 'p[%y%m%d](p'.date('ymd').')',
    6 => 'p[%Y%m%d](p'.date('Ymd').')',
    7 => 'p[%d-%m-%y](p'.date('d-m-y').')',
    8 => 'p[%d%m%Y](p'.date('d-m-Y').')',
    9 => 'p[%m-%d](p'.date('m-d').')',
    10 => 'p[%y-%m-%d](p'.date('y-m-d').')',
    11 => 'p[%Y-%m-%d](p'.date('Y-m-d').')',
    12 => 'payonline[%d%m%y](payonline'.date('dmy').')',
    14 => 'payonline[%d%m%Y](payonline'.date('dmY').')',
    15 => 'payonline[%m%d](payonline'.date('md').')',
    16 => 'payonline[%y%m%d](payonline'.date('ymd').')',
    17 => 'payonline[%Y%m%d](payonline'.date('Ymd').')',
    18 => 'payonline[%d-%m-%y](payonline'.date('d-m-y').')',
    19 => 'payonline[%d%m%Y](payonline'.date('d-m-Y').')',
    20 => 'payonline[%m-%d](payonline'.date('m-d').')',
    21 => 'payonline[%y-%m-%d](payonline'.date('y-m-d').')',
    22 => 'payonline[%Y-%m-%d](payonline'.date('Y-m-d').')',  
  );
}

/*
 * Avaliable encodes for the export file
 * */
function _payonline_hcs_encodes(){
  return array(
    1 => 'UTF-8',
    2 => 'Windows-1251',
  );
}

/*
 * Image with the symbol of russian rubl
 * */
function _payonline_hcs_rubl_image(){
  return '<img alt="rublPay" style="height: 10px;" src="'.AP_PAYONLINE_PATH_MODULE.'/images/rubl.gif" />';
}

/**
 * Generate Order ID
 * */
function _payonline_hcs_generate_order_id($out=''){
  $ip = explode('.', $_SERVER['REMOTE_ADDR']);
  $suff = ((int)$ip[0]+(int)end($ip))+(rand(155,775));
  $uuid = preg_replace('/[a-z]|[A-Z]/', '', uniqid());
  $arrUuid = str_split($uuid);

  foreach($arrUuid as $key=>$val){
    if(($key % 4) == 3){
      array_splice($arrUuid, $key, 0, '-');
    }
  }
  $out = implode('', $arrUuid);
  $out .= '/'.(int)($suff/rand(1,9));
  return $out;
}
